# === baseline_solvePnP.py ===
# מחבר את הכיול, מודל ה־3D, הנקודות ה־2D, ומחשב את הפוזה וה‐reprojection error

import numpy as np
import pandas as pd
import cv2
import os

# === 1. טעני את הכיול שלך (אפשר לשנות אם תעשי כיול חדש) ===
camera_matrix = np.array([
    [3.38821744e+03, 0.00000000e+00, 9.01478839e+02],
    [0.00000000e+00, 3.35612041e+03, 5.95209942e+02],
    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
], dtype=np.float32)

dist_coeffs = np.array([1.37363472, -68.4275187, 0.0146233947, 0.0668579741, 1366.46007], dtype=np.float32)

# === 2. טעני את נקודות ה־3D של הכובע ===
# שמרי בקובץ CSV בשם model_3d.csv עם עמודות name,X,Y,Z
model_path = "data/points/model_3d.csv"
model_df = pd.read_csv(model_path)

# === 3. בחרי כל פעם סרטון או פריים אחר ===
video_path = input("הכניסי את נתיב הסרטון: ").strip()
frame_index = int(input("איזה פריים לבחור? (למשל 200): "))

cap = cv2.VideoCapture(video_path)
cap.set(cv2.CAP_PROP_POS_FRAMES, frame_index)
ret, frame = cap.read()
cap.release()

if not ret:
    raise RuntimeError("❌ לא הצליח לקרוא את הפריים מהסרטון")

frame_name = os.path.basename(video_path).split('.')[0]
img_path = f"data/frames/{frame_name}_frame{frame_index}.jpg"
os.makedirs("data/frames", exist_ok=True)
cv2.imwrite(img_path, frame)
print(f"✅ נשמר: {img_path}")

# === 4. טעני את נקודות ה־2D שנמדדו לפריים הזה ===
# קובץ בשם frame_<frame_index>_2d.csv עם עמודות name,x,y
points_path = f"data/points/{frame_name}_frame{frame_index}_2d.csv"
points_2d = pd.read_csv(points_path)

# === 5. התאמה לפי שמות ===
merged = pd.merge(model_df, points_2d, on="name", how="inner")
if len(merged) < 6:
    raise ValueError("❌ נדרשות לפחות 6 נקודות משותפות בין 3D ל־2D")

object_points = merged[["X","Y","Z"]].to_numpy(np.float32)
image_points = merged[["x","y"]].to_numpy(np.float32)

# === 6. פתרון pose ===
success, rvec, tvec = cv2.solvePnP(object_points, image_points, camera_matrix, dist_coeffs)
if not success:
    raise RuntimeError("❌ solvePnP נכשל")

print("✅ Pose estimation succeeded!")
print("Rotation vector:\n", rvec)
print("Translation vector:\n", tvec)

# === 7. הקרנה מחדש על הפריים ===
projected, _ = cv2.projectPoints(object_points, rvec, tvec, camera_matrix, dist_coeffs)
projected = projected.reshape(-1,2)

for (x,y) in projected:
    cv2.circle(frame, (int(x), int(y)), 6, (0,255,0), -1)   # נקודות מחושבות
for (x,y) in image_points:
    cv2.circle(frame, (int(x), int(y)), 4, (0,0,255), -1)   # נקודות אמיתיות

out_img = f"data/frames/{frame_name}_proj_frame{frame_index}.jpg"
cv2.imwrite(out_img, frame)
print("💾 Saved projection image:", out_img)

# === 8. חישוב שגיאה ===
error = cv2.norm(image_points, projected, cv2.NORM_L2) / len(object_points)
print(f"📉 Mean Reprojection Error: {error:.4f} pixels")

# === 9. שמירה של rvec, tvec לתוצאות ===
out_npz = f"data/frames/{frame_name}_pose_frame{frame_index}.npz"
np.savez(out_npz, rvec=rvec, tvec=tvec, error=error)
print(f"📦 Saved pose vectors: {out_npz}")


python baseline_solvePnP.py

